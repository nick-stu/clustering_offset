function[verifyTrainLabel,verifyTag,verifyTrainData]=verifyGetLabelsNew(trainData)
    rows = size(trainData, 1);
    singleNum = rows / 9; % 原训练样本每个键位的样本数
    tag=[]; % 键位--类对应标签
    trainLabelTmp=[];
    verifyTrainData=[];
    verifyTrainLabel=[];
    numLabel=[]; % 类样本数
    classNumLabel=[]; % 键位类数
    innerOrder=[]; % 键位内聚类序号
    for i = 1:9
        mdl=clustering_offset_nearest( trainData( (i-1)*singleNum+1 : i*singleNum,:),false );
        for j=1:mdl.classNum
            numLabel=[numLabel length(find(mdl.label==j))];
        end
        
        tag=[tag repmat(i,[1,mdl.classNum])];
        innerOrder=[innerOrder 1:mdl.classNum];
        trainLabelTmp=[trainLabelTmp;mdl.label];
        classNumLabel=[classNumLabel mdl.classNum];
    end

    %% findMIN
    minclass=min(classNumLabel); % 键位的最小聚类数
    if minclass==1
        error('聚类过度');
    end
    sampleNum=Inf;
    index=find(classNumLabel==minclass); % 符合最小聚类数的键位
    %% 设置样本数，即找出符合最小聚类数的键位中的最小聚类的样本数，之所以不找全局的最小，是怕样本数实在过小，会有未知的影响
    for i=1:length(numLabel)
       if any( index == tag(i) ) && (numLabel(i)<sampleNum)
           sampleNum=numLabel(i);
       end
    end
    fprintf('sampleNum: %d\n',sampleNum);
    %% 判断是否可分，若对于每个键位，都至少存在minclass个聚类（样本数大于sampleSize），则可分
    lectMat=zeros(9,max(classNumLabel)); % 对应键位将被选中的类，序号为键位内类序号
    flagMat=ones(1,9)*(-1)*minclass;
    for i=1:length(numLabel)
        if numLabel(i)>=sampleNum 
            if flagMat( tag(i) )<0
                flagMat( tag(i) )=flagMat( tag(i) )+1;
                lectMat( tag(i),innerOrder(i) )=1;
            end
        end
    end
    if ~isempty(find(flagMat<0))
        error('等分失败');
    end
    %% 等分，训练数据与训练标签
    verifyTag=[];
    cursor=0;
    for i = 1:9
        flagMat=zeros(1,max(classNumLabel)); % 指代键位对应的聚类数
        tmpLabel=trainLabelTmp(i,:);
        label=zeros(minclass*sampleNum ,minclass*9);
        trainDataTmp=trainData( (i-1)*singleNum+1 : i*singleNum,:);
       %% 选出
        k=0;
        for j=1:singleNum 
            if lectMat(i,tmpLabel(j))==1
                if flagMat(tmpLabel(j))<sampleNum
                    flagMat(tmpLabel(j))=flagMat(tmpLabel(j))+1;
                    k=k+1;
                    label(k,tmpLabel(j)+cursor)=1;
                    verifyTrainData=[verifyTrainData ; trainDataTmp(j,:)];
                end
            end
        end
        cursor=cursor+minclass;
        verifyTag=[verifyTag repmat(i,[1,minclass])];
        verifyTrainLabel=[verifyTrainLabel;label];
    end
    %% 验证一下是否输出正确
end
